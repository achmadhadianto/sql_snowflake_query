USE ROLE ACCOUNTADMIN;
USE SCHEMA DEMO_DB.DEMO_SCHEMA;
USE WAREHOUSE XSMALL_WAREHOUSE;

-- Set up objects for loading JSON file
CREATE OR REPLACE TABLE MOVIE_ELT (
    JSON_VARIANT VARIANT
);

CREATE OR REPLACE FILE FORMAT JSON_FILE_FORMAT
    TYPE='JSON',
    FILE_EXTENSION=NULL,
    DATE_FORMAT='AUTO',
    TIME_FORMAT='AUTO',
    TIMESTAMP_FORMAT='AUTO',
    BINARY_FORMAT='HEX',
    TRIM_SPACE=FALSE,
    NULL_IF='',
    COMPRESSION='AUTO',
    ENABLE_OCTAL=FALSE,
    ALLOW_DUPLICATE=FALSE,
    STRIP_OUTER_ARRAY=TRUE,
    STRIP_NULL_VALUES=FALSE,
    IGNORE_UTF8_ERRORS=FALSE,
    REPLACE_INVALID_CHARACTERS=FALSE,
    SKIP_BYTE_ORDER_MARK=TRUE;

CREATE OR REPLACE STAGE MOVIE_STAGE
    FILE_FORMAT = JSON_FILE_FORMAT;

COPY INTO MOVIE_ELT 
FROM @MOVIE_STAGE
FILE_FORMAT = JSON_FILE_FORMAT;

-- Query semi-structured data type

SELECT JSON_VARIANT FROM MOVIE_ELT;
-- di json ada: 4 id, title, release_date actors, dan rating
-- actor dan rating terbagi lagi
-- di rating ada imdb dan metacritic
SELECT 
    JSON_VARIANT:id AS ID, 
    JSON_VARIANT:title AS TITLE, 
    JSON_VARIANT:release_date AS RELEASE_DATE, 
    JSON_VARIANT:release_date::date AS RELEASE_DATE_DD_CAST, 
    TO_DATE(JSON_VARIANT:release_date) AS RELEASE_DATE_FUNC_CAST,
    JSON_VARIANT:actors AS ACTORS,
    JSON_VARIANT:actors[0] AS FIRST_ACTOR,
    JSON_VARIANT:ratings AS RATINGS,
    JSON_VARIANT:ratings.imdb_rating AS IMDB_RATING
FROM MOVIE_ELT
WHERE RELEASE_DATE >= DATE('2000-01-01');
-- pembagian actor dan rating tetap jadi 1 tabel, tidak terpisah. semua tabel masih ada tanda kutip
-- release date, dibuat 3, asli, yang tanpa kutip YYYY-DD-MM dan YYYY-MM-DD, sama-sama convert ke date
-- actors[0] mengambil nama pertama, masih tanda kutip. .imdb_rating mengambil imdb_rating tanpa kutip

-- Query semi-structured data type - case sensitivity
SELECT 
    JSON_VARIANT:id AS ID, 
    JSON_VARIANT:Title AS TITLE, 
    JSON_VARIANT:release_date::date AS RELEASE_DATE, 
    JSON_VARIANT:actors[0] AS FIRST_ACTOR,
    JSON_VARIANT:RATINGS.imdb_rating AS IMDB_RATING
FROM MOVIE_ELT
WHERE RELEASE_DATE >= DATE('2000-01-01');
-- TITLE dan IMDB_RATING null semua, karena case sensitivity

-- Query semi-structured data type with bracket notation
SELECT 
    JSON_VARIANT['id'] AS ID, 
    JSON_VARIANT['title'] AS TITLE, 
    JSON_VARIANT['release_date']::date AS RELEASE_DATE, 
    JSON_VARIANT['actors'][0] AS FIRST_ACTOR,
    JSON_VARIANT['ratings']['imdb_rating'] AS IMDB_RATING
FROM MOVIE_ELT
WHERE RELEASE_DATE >= DATE('2000-01-01');
-- hasil sama tetap tanda kutip 2. berarti bisa 2 cara ini pakai : dan ['']
-- yang imdb rating tidak pakai . tapi pakai [''] juga

-- Flatten table function
SELECT JSON_VARIANT:title, JSON_VARIANT:ratings FROM MOVIE_ELT LIMIT 1;

--Flatten membongkar array dan mengurai objek JSON

SELECT * FROM TABLE(FLATTEN(INPUT => SELECT JSON_VARIANT:ratings FROM MOVIE_ELT LIMIT 1));
-- ada subquery yang mengambil rating, isinya masih gabung dan pakai {"imdb_rating":8.9, "metacritic.. "}
-- lalu di ambil tabelnya oleh query utama dengan di pecah (FLATTEN(INPUT => )
-- isi tabel ini ada SEQ, KEY, PATH, INDEX, VALUE, THIS

-- Jadi bisa langsung di ambil VALUE dari imdb rating
SELECT VALUE FROM TABLE(FLATTEN(INPUT => SELECT JSON_VARIANT:ratings FROM MOVIE_ELT LIMIT 1));


-- Lateral Flatten
SELECT 
    JSON_VARIANT:title,
    JSON_VARIANT:release_date::date,
    L.VALUE 
FROM MOVIE_ELT F,
LATERAL FLATTEN(INPUT => F.JSON_VARIANT:ratings) L
LIMIT 2;
-- bentuknya bukan subquery, tapi dianggap tabel L
-- LATERAL FLATTEN untuk mengikat hasil flatten mengikuti/terhubung tabel utama

-- Lateral Flatten edit sendiri agar lebih jelas terhubungnya
SELECT 
    JSON_VARIANT:title,
    JSON_VARIANT:release_date::date,
    JSON_VARIANT:ratings,
    L.VALUE,
    L.VALUE:imdb_rating::FLOAT AS IMDB_RATING,
    L.VALUE:metacritic_rating_percentage::INT AS METACRITIC_RATING_PERCENTAGE
FROM MOVIE_ELT F,
LATERAL FLATTEN(INPUT => F.JSON_VARIANT:ratings) L
LIMIT 2;
-- bentuknya bukan subquery, tapi dianggap tabel L
-- LATERAL FLATTEN untuk mengikat hasil flatten mengikuti/terhubung tabel utama
-- tetap gagal isinya NULL, karena file JSON untuk ratting bentuknya bukan array

-- Extract Transform Load (ETL)
CREATE OR REPLACE TABLE MOVIE_ETL (
    ID STRING, 
    TITLE STRING, 
    RELEASE_DATE DATE, 
    STARS ARRAY, 
    RATINGS OBJECT
);

COPY INTO MOVIE_ETL FROM
(SELECT
    $1:id,
    $1:title,
    $1:release_date::date,
    $1:actors,
    $1:ratings
FROM @MOVIE_STAGE/imdb_movies.json)
FILE_FORMAT = JSON_FILE_FORMAT;
-- $1: Mengacu pada seluruh data dari file JSON di setiap baris. File JSON ini dianggap sebagai satu kolom (disebut kolom pseudo), yang diberi label $1
-- $1:id: Mengambil nilai dari atribut id di JSON.

SELECT * FROM MOVIE_ETL;

SELECT 
    ID, 
    TITLE, 
    RELEASE_DATE, 
    STARS[0]::string AS FIRST_STAR, 
    RATINGS['imdb_rating'] AS IMDB_RATING 
FROM MOVIE_ETL;
-- Karena STAR sebagai ARRAY, yang ambil nilai pertama
-- Sedangkan RATING sebagai Objek, jadi bisa diambil nilai dalamnya baik dengan [''] maupun .
